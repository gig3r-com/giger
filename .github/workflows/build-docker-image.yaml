name: Build
on:
  workflow_call:
    inputs:
      DOCKER_CONTEXT:
        type: string
        required: false
        default: "."
      DOCKERFILE_NAME:
        type: string
        required: false
        default: "Dockerfile"
      IMAGE_NAME:
        type: string
        required: true
      IMAGE_TAG:
        type: string
        required: false
        default: ""
      REGISTRY_URL:
        type: string
        required: false
      GITHUB_RUNNER_NAME:
        type: string
        required: false
        default: "microk8s-runner-1"
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
env:
  IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.IMAGE_NAME }}
#
jobs:
  build-app:
    runs-on: ${{ inputs.GITHUB_RUNNER_NAME }}
    steps:
      - name: install additional packages
        run: |
          sudo apt update
          sudo apt install -y curl git
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DATA_SSH_KEY }}
          submodules: recursive

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
        with:
          prefix: CI_

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.IMAGE }}:${{ env.IMAGE_TAG }}
          context: ${{ inputs.DOCKER_CONTEXT }}
          file: ${{ inputs.DOCKERFILE_NAME }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max
        env:
          IMAGE_TAG: ${{ inputs.IMAGE_TAG && inputs.IMAGE_TAG || env.CI_GITHUB_REF_NAME_SLUG_URL }}
