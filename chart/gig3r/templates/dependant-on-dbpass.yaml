{{ $dbpass := include "gig3r.database.password" (dict "Namespace" .Release.Namespace ) }}
{{ with (mergeOverwrite . (dict "Values" (dict "database" (dict "password" $dbpass)) )) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: gig3r-secret
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1000"
data:
  DB_PASSWORD: "{{ $dbpass }}"
  backend_config.json: >-
{{ include "gig3r.backend.config" . | b64enc | indent 4 }}

---
# This job creates postgres database
apiVersion: batch/v1
kind: Job
metadata:
  name: db-creator
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "-100"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      containers:
      - name: db-creator
        image: postgres:16.0-alpine
        command: ["psql"]
        args: 
        - "--host=postgres-postgresql.postgres.svc.cluster.local"
        - "--port=5432"
        - "--username={{ .Values.database.admin.user }}"
        - "-c CREATE DATABASE \"{{ .Values.database.name }}\";"
        - "-c CREATE USER \"{{ .Values.database.user }}\" WITH ENCRYPTED PASSWORD '{{ .Values.database.password }}';"
        - "-c GRANT ALL PRIVILEGES ON DATABASE \"{{ .Values.database.name }}\" TO \"{{ .Values.database.user }}\";"
        - "-c ALTER DATABASE \"{{ .Values.database.name }}\" OWNER TO \"{{ .Values.database.user }}\";"
        env:
        - name: PGPASSWORD
          value: "{{ .Values.database.admin.password }}"
      restartPolicy: Never
  backoffLimit: 4

---
#this job initiates application database

apiVersion: batch/v1
kind: Job
metadata:
  name: db-creator
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "10"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      containers:
      - name: db-creator
        image: {{ include "gig3r.backend.image" . }}
        command: ["sh"]
        args: 
        - -c
        - "flask init database; {{ if ne .Values.environment "app" }}flask init staticdata;{{ end }}"
        env:
        - name: PGPASSWORD
          value: "{{ .Values.database.admin.password }}"
        volumeMounts:
        - mountPath: /app/.config.json
          name: config
          subPath: "backend_config.json"
          readOnly: true
      volumes:
      - name: config
        secret:
          secretName: gig3r-secret
      restartPolicy: Never
  backoffLimit: 4

---

# This job upgrades postgres database
apiVersion: batch/v1
kind: Job
metadata:
  name: db-updater
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "20"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      containers:
      - name: db-updater
        image: {{ include "gig3r.backend.image" . }}
        command: ["flask"]
        args: 
        - db
        - upgrade
      restartPolicy: Never
  backoffLimit: 4

---
# This job deletes postgres database
apiVersion: batch/v1
kind: Job
metadata:
  name: db-deleter
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-weight: "100"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      containers:
      - name: db-deleter
        image: postgres:16.0-alpine
        command: ["psql"]
        args: 
        - "--host=postgres-postgresql.postgres.svc.cluster.local"
        - "--port=5432"
        - "--username={{ .Values.database.admin.user }}"
        - "-c DROP DATABASE \"{{ .Values.database.name }}\" WITH (FORCE);"
        - "-c DROP USER \"{{ .Values.database.user }}\";"
        env:
        - name: PGPASSWORD
          value: "{{ .Values.database.admin.password }}"
      restartPolicy: Never
  backoffLimit: 1

  {{- end -}}